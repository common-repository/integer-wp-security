<?php


class DevsoftIn_Wp_Sec_Malware_Scanner_Settings {

	const TABLE_MALWARE = 'sec_malware';
	/**
	 * Files to core WordPress.
	 *
	 * @var mixed
	 */
	public $wp_core_files_md5;
	/**
	 * The ID of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string $plugin_name The ID of this plugin.
	 */
	private $plugin_name;
	/**
	 * The version of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string $version The current version of this plugin.
	 */
	private $version;
	/**
	 * Checked files
	 *
	 * @var mixed
	 */
	private $checked_files;
	/**
	 * Suspicious file
	 *
	 * @var mixed
	 */
	private $suspicious_file;
	/**
	 * Corrupted files
	 *
	 * @var mixed
	 */
	private $corrupted_files;
	/**
	 * Allow dir
	 *
	 * @var mixed
	 */
	private $allow_dir;
	private $utils;

	/**
	 * Initialize the class and set its properties.
	 *
	 * @param string $plugin_name The name of this plugin.
	 * @param string $version The version of this plugin.
	 *
	 * @since    1.0.0
	 */
	public function __construct( $plugin_name, $version ) {
		$this->plugin_name     = $plugin_name;
		$this->version         = $version;
		$this->corrupted_files = array();
		$this->checked_files   = 0;
		$this->suspicious_file = array();
		$this->allow_dir       = array(
			'',
			'wp-includes',
			'wp-admin',
			'wp-content',
		);

		$this->wp_core_files_md5 = $this->get_wp_core_files_md5( get_bloginfo( 'version' ) );

		if ( $this->wp_core_files_md5 === false ) {
			return false;
		}

		$this->load_dependencies();
	}

	/**
	 * @param $version
	 *
	 * @return array|void
	 */
	private function get_wp_core_files_md5( $version ) {
		if ( ! $version ) {
			return;
		}
		$path = dirname( __FILE__ ) . "/js/wp_versions/wp_v_$version.md5.json";
		if ( ! file_exists( $path ) ) {
			return;
		}
		$files = json_decode( file_get_contents( $path ) );
		$array = array();
		foreach ( $files as $file ) {
			if ( $file ) {
				$value                  = get_object_vars( $file );
				$array[ key( $value ) ] = $value[ key( $value ) ];
			}
		}

		return $array;

	}

	/**
	 *
	 */
	private function load_dependencies() {
		require_once plugin_dir_path( dirname( __FILE__ ) ) . 'includes/class-wp-sec-utils.php';
		$this->utils = new DevsoftIn_Wp_Sec_Utils();
	}

	/**
	 * Loads the scripts for the malware session.
	 *
	 * @return void
	 */
	public function enqueue_scripts() {
		wp_enqueue_script(
			$this->plugin_name . '_malware',
			plugin_dir_url( __FILE__ ) . 'js/wp-sec-malware.js',
			array( 'jquery' ),
			$this->version,
			false
		);
		wp_localize_script(
			$this->plugin_name . '_malware',
			'malware_scanner_ajax',
			array(
				'ajaxurl' => admin_url( 'admin-ajax.php' ),
			)
		);
	}

	/**
	 * Function that loads sessions from the Malware.
	 *
	 * @return void
	 */
	public function initialize_malware_setting_settings() {

		$this->utils->send_report( 'tabs', 'sec_malware_settings', true );

		if ( false == get_option( 'sec_malware_settings' ) ) {
			$default_array = $this->default_display_options();
			add_option( 'sec_malware_settings', $default_array );
		}

		add_settings_section(
			'malware_scanner',
			__( 'Malware Scanner', $this->plugin_name ),
			array( $this, 'general_options_callback' ),
			'sec_malware_settings'
		);

		add_settings_field(
			'malware_scanner',
			__( 'Scanner', $this->plugin_name ),
			array( $this, 'scanner_callback' ),
			'sec_malware_settings',
			'malware_scanner'
		);

		add_settings_section(
			'malware_tabs_section',
			'',
			array( $this, 'tabs_malware' ),
			'sec_malware_settings'
		);

		register_setting(
			'sec_malware_settings',
			'sec_malware_settings'
		);
	}

	/**
	 * Create an array with the attributes that will be used in this area.
	 *
	 * @return void
	 */
	public function default_display_options() {
		$defaults = array(
			'malware_scanner' => '',
		);

		return $defaults;
	}

	/**
	 * Displays a description for the page.
	 *
	 * @return void
	 */
	public function general_options_callback() {
		printf(
			'<p>%s</p>',
			esc_html__( 'Protect your WordPress project from malware with our scanner.', $this->plugin_name )
		);
	}

	/**
	 * Displays the scanner button
	 *
	 * @return void
	 */
	public function scanner_callback() {
		$options = get_option( 'sec_malware_settings' );

		$scanner = isset( $options['malware_scanner'] ) ? $options['malware_scanner'] : '';

		printf(
			'<input type="button" class="button" id="scanner"  name="resend_code" value="%s" />',
			esc_attr__( 'Scanner', $this->plugin_name )
		);
	}

	/**
	 * Loads div that will be used to display the malware tabs.
	 *
	 * @return void
	 */
	public function tabs_malware() {
		printf(
			'<div id="scanner_tabs"></div>
			<div id="scanner_result"></div>
			'
		);
	}

	/**
	 * Run the scanner looking for corrupted files.
	 *
	 * @return void
	 */
	public function exec_scanner() {
		if ( ! is_admin() ) {
			wp_die();
		}

		$this->utils->send_report( 'malware', 'exec_scanner', true );

		$result = $this->check_integrity_files();

		$this->utils->send_report(
			'malware',
			'suspicious_file',
			true,
			array(
				'total' => strval( count( $result['data']['suspicious_file'] ) )
			)
		);
		$this->utils->send_report(
			'malware',
			'corrupted_files',
			true,
			array(
				'total' => strval( count( $result['data']['corrupted_files'] ) )
			)
		);

		printf(
			wp_json_encode(
				$result
			)
		);
		wp_die();
	}

	/**
	 * @return array
	 */
	public function check_integrity_files() {
		foreach ( $this->allow_dir as $dir ) {
			if ( ! is_dir( $this->wp_realpath( $dir ) ) ) {
				continue;
			}
			$this->scan_directory(
				$this->wp_realpath( $dir ),
				'' === $dir,
				false
			);
		}

		$this->suspicious_file = array_unique( $this->suspicious_file );
		$this->corrupted_files = array_unique( $this->corrupted_files );

		global $wpdb;

		$table_malware = $wpdb->prefix . self::TABLE_MALWARE;

		$suspicious_file_json = str_replace(
			'"',
			"'",
			str_replace(
				'\/',
				'/',
				json_encode( $this->suspicious_file )
			)
		);
		$corrupted_files_json = str_replace(
			'"',
			"'",
			str_replace(
				'\/',
				'/',
				json_encode( $this->corrupted_files )
			)
		);
		$current_user         = wp_get_current_user();

		$wpdb->query(
			'INSERT INTO ' . $table_malware . ' ( ' .
			'user_id,  ' .
			'count_checked_files,  ' .
			'count_corrupted_files,  ' .
			'count_suspicious_file,  ' .
			'json_corrupted_files,  ' .
			'json_suspicious_file ' .
			' ) VALUES ( ' .
			$current_user->get( 'ID' ) . ',' .
			sanitize_text_field( $this->checked_files ) . ',' .
			count( $this->corrupted_files ) . ', ' .
			count( $this->suspicious_file ) . ', "' .
			sanitize_text_field( $corrupted_files_json ) . '", "' .
			sanitize_text_field( $suspicious_file_json ) . '" )'
		);

		return array(
			'status'  => '1',
			'message' => 'return result scanner to wp malware',
			'data'    => array(
				'last_result'     => null,
				'checked_files'   => $this->checked_files,
				'corrupted_files' => $this->corrupted_files,
				'suspicious_file' => $this->suspicious_file,
			),
		);
	}

	/**
	 * @param $dir
	 *
	 * @return mixed
	 */
	private function wp_realpath( $dir ) {
		return get_home_path();
	}

	/**
	 * @param $path
	 * @param $root
	 * @param $plugins_folder
	 */
	private function scan_directory( $path, $root, $plugins_folder ) {

		$skipped_files = array(
			'.',
			'..',
			'themes',
			'uploads',
		);

		$files = scandir( $path );

		foreach ( $files as $file ) {

			if ( in_array( $file, $skipped_files ) ) {
				continue;
			}
			$ignore_files = array();
			if ( $root && ! $plugins_folder ) {
				$ignore_files = array(
					'.git',
					'.htaccess',
					'wp-config.php',
					'license.txt',
					'readme.html',
					'index.php',
				);
			}

			if ( in_array( $file, $ignore_files ) ) {
				continue;
			}

			$realpath_file = $path . '/' . $file;

			if ( is_dir( $realpath_file ) && ! $plugins_folder ) {
				$this->scan_directory( $realpath_file, $file != 'plugins' ? false : true,
					$file == 'plugins' ? true : false );
			} else {
				$this->scan_file( $realpath_file );
			}
		}
	}

	private function scan_file( $file ) {
		if ( ! is_file( $file ) ) {
			return null;
		}

		$file_parts = pathinfo( $file );

		if (
			$file_parts['extension'] != 'html'
			&& $file_parts['extension'] != 'js'
			&& $file_parts['extension'] != 'xml'
			&& $file_parts['extension'] != 'php'
		) {
			return null;
		}

		$this->checked_files ++;

		$core_file_md5 = false;
		$file_md5      = md5_file( $file );
		$relative_path = $this->path_relative( $file );
		if ( isset( $this->wp_core_files_md5[ $relative_path ] ) ) {
			$core_file_md5 = $this->wp_core_files_md5[ $relative_path ];
		} else {
			array_push( $this->suspicious_file, $relative_path );
		}
		if ( $core_file_md5 ) {
			if ( $core_file_md5 !== $file_md5 ) {
				array_push( $this->corrupted_files, $relative_path );
			}
		}
	}

	/**
	 * @param $file
	 *
	 * @return false|string
	 */
	private function path_relative( $file ) {
		$path     = substr( $file, strlen( ABSPATH ) );
		$relative = '';
		foreach ( $this->allow_dir as $dir ) {
			if ( '' !== $dir ) {
				$relative = stristr( $file, $dir );
			}
			if ( $relative ) {
				$path = $relative;
				break;
			}
		}

		return $path;
	}

	/**
	 * Return last result malware scanner.
	 *
	 * @return void
	 */
	public function last_scanner() {

		global $wpdb;

		$table_malware = $wpdb->prefix . self::TABLE_MALWARE;

		$last_scanner = $wpdb->get_results( "SELECT * FROM $table_malware ORDER BY created_at DESC LIMIT 1", ARRAY_A );

		printf(
			wp_json_encode(
				array(
					'status'  => '1',
					'message' => 'return result scanner to wp malware',
					'data'    => array(
						'last_result'     => esc_html( $last_scanner[0]['created_at'] ),
						'checked_files'   => esc_html( intval( $last_scanner[0]['count_checked_files'] ) ),
						'corrupted_files' => $this->format_list_files_string_to_array( $last_scanner[0]['json_corrupted_files'] ),
						'suspicious_file' => $this->format_list_files_string_to_array( $last_scanner[0]['json_suspicious_file'] ),
					),
				)
			)
		);
		wp_die();
	}

	private function format_list_files_string_to_array( $files ) {
		if ( $files !== '[]' ) {
			return explode( ',', str_replace( "'", '', str_replace( ']', '', str_replace( '[', '', $files ) ) ) );
		}

		return array();

	}
}
